#!/bin/bash -xe

# Cleaning
[ -d ./tmp ] && rm -rf ./tmp
[ -d ./bin ] && rm -rf ./bin
[ -d ./bin-nor ] && rm -rf ./bin-nor
[ -d ./logs ] && rm -rf ./logs
[ -d ./logs-nand ] && rm -rf ./logs-nand
[ -d ./logs-nor ] && rm -rf ./logs-nor
[ -d ./logs-initram ] && rm -rf ./logs-initram

export TMPDIR="$PWD/tmp"
mkdir $TMPDIR

if [ "$1" = turris ] || [ "$1" = omnia ]; then
    export TARGET_BOARD="$1"
    shift
else
    echo "The first argument is empty or unknown!"
    echo "You have to specify target board - options are 'turris' or 'omnia'"
    exit 1
fi

make_defconfig() {
	make defconfig "$@"
	egrep '^(#[[:space:]]+)?CONFIG_KERNEL' configs/common configs/$TARGET_BOARD | sed 's|.*:||' >> ./.config
	if [ -n "${PKG_BRANCH}" ] && [ "${PKG_BRANCH}" \!= master ] && [ "${PKG_BRANCH}" \!= stable ] && [ "${PKG_BRANCH}" \!= stable-omnia ]; then
		echo CONFIG_PACKAGE_cznic-repo-keys-test=y >> .config
		echo CONFIG_PACKAGE_getbranch-test=y >> .config
	else
		echo CONFIG_PACKAGE_cznic-repo-keys-test=m >> .config
		echo CONFIG_PACKAGE_getbranch-deploy=y >> .config
	fi
}

# Build NAND FW
[ -z "$OPENWRT_BRANCH"  ] || PKG_BRANCH="-$OPENWRT_BRANCH"
[ -n "$REAL_PKG_BRANCH" ] || REAL_PKG_BRANCH="$PKG_BRANCH"
cat configs/common configs/$TARGET_BOARD | sed -e "s|@BOARD@|$TARGET_BOARD|" -e "s|@BRANCH@|$PKG_BRANCH|" > .config
[ -n "$BUILD_ALL" ] && echo -e "CONFIG_ALL=y\nCONFIG_SDK=y\nCONFIG_IB=y\nCONFIG_IB_STANDALONE=n\nCONFIG_PACKAGE_ucollect-meta=m" >> .config
echo CONFIG_ALL_KMODS=y >> .config

[ -n "$USE_CCACHE" ] && echo "CONFIG_CCACHE=y" >> .config


if [ -f "$HOME"/mime.key ]; then
	echo "CONFIG_SIGNED_PACKAGES=y" >> .config
	rm -f key-build key-build.pub
	cp "$HOME/mime.key" key-build
	cp "$HOME/mime.pub" key-build.pub
fi


make_defconfig

if [ -d .git ] ; then
	git log -n1 --format='%H' >files/etc/git-version
fi

make clean

[ -z "$BUILD_ALL" ] || make dirclean

set -- "$@" PKG_BRANCH=${PKG_BRANCH/-/}

[ -z "$PERSISTENT_CCACHE" ] || set -- "$@" CCACHE_DIR="`pwd`/ccache" CCACHE_HOST_DIR="`pwd`/ccache-host"

[ -d ./bin ] && rm -rf ./bin
[ -d ./tmp ] && rm -rf ./tmp

PUB_BIN_DIR="`ls -1d bin-nand/* | head -n1`"
# Generate lists
[ -n "$BUILD_ALL" ] || USRLISTS_ARGS="--minimal"
LIST_BRANCH="${PKG_BRANCH#-}"
[ -n "$LIST_BRANCH" ] || LIST_BRANCH="$(echo "$GIT_BRANCH" | sed 's|.*/||')"

# Generate packages that block each other, based on their file collisions
# For some reason, mktemp -d doesn't work with TMPDIR set, so avoid that here.
# This is deactivated for now until updater #186 is resolved.
#TMPDIR= ./scripts/negative_deps.pl $PUB_BIN_DIR >>$PUB_BIN_DIR/lists/base.lua


if [ "$TARGET_BOARD" = omnia ]; then
	cp configs/config-omnia-rescue .config
	[ -n "$USE_CCACHE" ] && echo "CONFIG_CCACHE=y" >> .config
    # Ugly hack, make python compile first to avoid possible race
    ./scripts/feeds uninstall python
	make defconfig CONFDEFAULT=n
	make clean
	make "$@"
	echo -e "CONFIG_TARGET_ROOTFS_INITRAMFS=y\nCONFIG_TARGET_INITRAMFS_COMPRESSION_XZ=y" >> .config
	sed -i 's/^TARGET_ROOTFS_INCLUDE_KERNEL=.*/# TARGET_ROOTFS_INCLUDE_KERNEL is not set/' .config
	sed -i 's/^CONFIG_TARGET_ROOTFS_INCLUDE_DTB.*/# CONFIG_TARGET_ROOTFS_INCLUDE_DTB is not set/' .config
	make defconfig
	cp build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/root-mvebu/boot/uboot* build_dir
	rm -f build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/root-mvebu/boot/* build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/root-mvebu/etc/rc.d/*rainbow
	make target/linux/compile "$@"
	cp `ls -d build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/linux-mvebu`/{zImage-initramfs,zImage-initramfs-armada-385-turris-omnia}
	cat build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/linux-mvebu/linux-4.4*/arch/arm/boot/dts/armada-385-turris-omnia.dtb >> `ls -d build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/linux-mvebu`/zImage-initramfs-armada-385-turris-omnia
	[ \! -d ./logs ] || cp ./.config logs/config
	[ \! -d ./logs ] || mv ./logs ./logs-initram
	cp build_dir/target-arm_*/linux-mvebu/zImage-initramfs-armada-385-turris-omnia bin/mvebu-musl/omnia-initramfs-zimage
	SIZE="`du -b bin/mvebu-musl/omnia-initramfs-zimage | sed 's|[[:blank:]].*||'`"
	echo "Rescue image size is ${SIZE}."
	if [ "$SIZE" -ge $(( 7 * 1024 * 1024 )) ]; then
		echo FATAL: Image too big.
	fi
	mv build_dir/uboot* bin/mvebu-musl
	mkdir -p bin/mvebu-musl/x86-64
	cp build_dir/host/uboot-turris-omnia*/turris-omnia-uboot/* bin/mvebu-musl/x86-64
	mv bin bin-nor
	rm -rf bin-nor/mvebu-musl/packages
elif [ "$TARGET_BOARD" = turris ]; then
	cp -r turris-legacy/* .
fi
